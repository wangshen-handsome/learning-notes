import{_ as a,c as l,o as e,V as i}from"./chunks/framework.9c1268ca.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"firstStage/firstStagefour.md","filePath":"firstStage/firstStagefour.md"}'),o={name:"firstStage/firstStagefour.md"},s=i(`<h2 id="css背景" tabindex="-1">CSS背景 <a class="header-anchor" href="#css背景" aria-label="Permalink to &quot;CSS背景&quot;">​</a></h2><p>CSS 背景属性用于定义 HTML 元素的背景，通过背景属性我们可以定义元素的背景颜 色、背景图片、背景图片的平铺方式和显示位置等。</p><h3 id="background-color" tabindex="-1">background-color <a class="header-anchor" href="#background-color" aria-label="Permalink to &quot;background-color&quot;">​</a></h3><p>background-color 属性，设置元素的背景颜色。</p><h4 id="常用的值" tabindex="-1">常用的值 <a class="header-anchor" href="#常用的值" aria-label="Permalink to &quot;常用的值&quot;">​</a></h4><ul><li>color_name 规定颜色值为颜色名称的背景颜色（比如 red）</li><li>hex_number 规定颜色值为十六进制值的背景颜色（比如 #ff0000）。</li><li>rgb_number 规定颜色值为 rgb 代码的背景颜色（比如 rgb(255,0,0)）。</li><li>transparent 默认。背景颜色为透明。</li></ul><blockquote><p>提示：背景应用于由内容和内边距、边框组成的区域</p></blockquote><h3 id="background-image" tabindex="-1">background -image <a class="header-anchor" href="#background-image" aria-label="Permalink to &quot;background -image&quot;">​</a></h3><p>background-image 属性，为元素设置背景图像。</p><blockquote><p>background-image:url(&#39;图片资源路径&#39;);</p></blockquote><h4 id="常用的值-1" tabindex="-1">常用的值 <a class="header-anchor" href="#常用的值-1" aria-label="Permalink to &quot;常用的值&quot;">​</a></h4><ul><li>url(‘URL’) 指向图像的路径。</li><li>none 默认值。不显示背景图像。</li></ul><blockquote><p>元素的背景默认绘制区域包括内边距和边框。</p><p>默认地，背景图像位于元素的左上角，并在水平和垂直方向上重复。</p><p>我们也可以通过 background-repeat 属性可以改变背景图像的平铺方式。</p></blockquote><h3 id="background-repeat" tabindex="-1">background -repeat <a class="header-anchor" href="#background-repeat" aria-label="Permalink to &quot;background -repeat&quot;">​</a></h3><p>background-repeat 属性，设置是否或如何重复背景图像。</p><h4 id="常用的值-2" tabindex="-1">常用的值 <a class="header-anchor" href="#常用的值-2" aria-label="Permalink to &quot;常用的值&quot;">​</a></h4><ul><li>repeat 默认。背景图像将在垂直方向和水平方向重复。</li><li>repeat-x 背景图像将在水平方向重复。</li><li>repeat-y 背景图像将在垂直方向重复。</li><li>no-repeat 背景图像将仅显示一次。</li></ul><h3 id="background-position" tabindex="-1">background -position <a class="header-anchor" href="#background-position" aria-label="Permalink to &quot;background -position&quot;">​</a></h3><p>background-position 属性，设置背景图像（由 background-image 定义）的起始位置。 背景图像如果要重复，将从这一点开始。</p><blockquote><p>语法：background-position: xpos ypos;</p></blockquote><p>​ 一般来说它有两个值：第一个值表示水平位置，第二个值表示垂直位置。如果仅规定 了一个值，另一个值将是 50%。</p><h4 id="取值" tabindex="-1">取值 <a class="header-anchor" href="#取值" aria-label="Permalink to &quot;取值&quot;">​</a></h4><ul><li>关键字：top、bottom、left、right 和 center ; 指定图像放置于元素内边距区域的位置，一个对应水平方向，另一个对应垂直方向。 左上角为：left top;</li><li>长度值 指定图像相对于元素 内边距区左上角的偏移量。左上角是 0 0，如果设置值为 50px 100px，图像的左上角将在元素内边距区左上角向右 50 像素、向下 100 像素的位置上</li><li>百分比 指定百分数值将同时应用于元素和图像，左上角是 0% 0%；右下角是 100% 100%。 如果设置为 50% 50%，图像的中心点将与元素的中心点对齐显示。</li></ul><h3 id="background简写" tabindex="-1">background简写 <a class="header-anchor" href="#background简写" aria-label="Permalink to &quot;background简写&quot;">​</a></h3><p>background是背景复合属性，在一个声明中设置所有背景属性。</p><blockquote><p>语法：background:bg-color bg-image bg-repeat bg-position;</p></blockquote><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">background: red url(“bgimage.jpg”) no-repeat left top;</span></span></code></pre></div><ul><li>当使用简写属性时，属性值的顺序为：: <ul><li>background-color</li><li>background-image</li><li>background-repeat</li><li>background-position</li></ul></li></ul><p>如果某个属性不需要设置，可以省略。</p><h2 id="css显示模式" tabindex="-1">CSS显示模式 <a class="header-anchor" href="#css显示模式" aria-label="Permalink to &quot;CSS显示模式&quot;">​</a></h2><p>概述： 显示模式是指元素以什么方式显示，如div默认独占一行，span默认可以多个在一行排列，了解它们的特点与分类可以更好的布局网页</p><p><mark>HTML元素一般分为块级元素与行内元素、行内块元素</mark></p><h3 id="元素默认显示模式与元素特性总结" tabindex="-1">元素默认显示模式与元素特性总结 <a class="header-anchor" href="#元素默认显示模式与元素特性总结" aria-label="Permalink to &quot;元素默认显示模式与元素特性总结&quot;">​</a></h3><ul><li>本身属性为display:block;的元素 称为块级元素 <ul><li>常见块级元素 div,h1-h6,p,ul,li,dl,dt,ol</li></ul></li><li>本身属性为display:inline;的元素称为行内元素 <ul><li>常见行内元素：span,strong,em,i,a,b</li></ul></li><li>本身属性为display:inline-block的元素称为行级块元素 <ul><li>常见行内块元素：img、input(表单元素后续会讲到)</li></ul></li></ul><h4 id="块级元素特性总结" tabindex="-1">块级元素特性总结 <a class="header-anchor" href="#块级元素特性总结" aria-label="Permalink to &quot;块级元素特性总结&quot;">​</a></h4><ul><li>独成一行，可以设置宽高。</li><li>在不设置宽度的情况下，块级元素的宽度是它父级元素内容的宽度。</li><li>在不设置高度的情况下，块级元素的高度是它本身内容的高度。</li><li>可以设置所有盒模型属性。</li></ul><h4 id="行内元素特性总结" tabindex="-1">行内元素特性总结 <a class="header-anchor" href="#行内元素特性总结" aria-label="Permalink to &quot;行内元素特性总结&quot;">​</a></h4><ul><li>默认并排，不可以设置宽高，宽高取决于内容。</li><li>行内元素只能容纳文本或者其他内联元素（此处请注意，不要在内联元素中嵌套块级元素） 。</li><li>不可以设置上下外边距（上下边框和内边距可以设置，但是不占位）。</li></ul><h4 id="行内块元素特性总结" tabindex="-1">行内块元素特性总结 <a class="header-anchor" href="#行内块元素特性总结" aria-label="Permalink to &quot;行内块元素特性总结&quot;">​</a></h4><ul><li>默认并排，可以设置宽高。</li><li>行内块元素可以容纳文本或者其他内联元素。</li><li>行标签之间有间隙,可以设置所有盒模型属性。</li><li><h3 id="元素类型转换" tabindex="-1">元素类型转换 <a class="header-anchor" href="#元素类型转换" aria-label="Permalink to &quot;元素类型转换&quot;">​</a></h3></li></ul><p>特殊情况下我们需要进行元素的模式转换，改变默认元素模式使其拥有另一种元素模式的特性，使用display属性能够将三者任意转换。</p><ul><li>display:inline;转换为行内元素。 【不常用】</li><li>display:block;转换为块状元素。 【常用】</li><li>display:inline-block;转换为行内块状元素 【比较常用】</li></ul><h2 id="css显示隐藏" tabindex="-1">CSS显示隐藏 <a class="header-anchor" href="#css显示隐藏" aria-label="Permalink to &quot;CSS显示隐藏&quot;">​</a></h2><h3 id="display" tabindex="-1">display: <a class="header-anchor" href="#display" aria-label="Permalink to &quot;display:&quot;">​</a></h3><ul><li>none：隐藏该元素并且该元素所占的空间也不存在了。</li><li>block; 显示元素</li></ul><h3 id="visibility" tabindex="-1">visibility: <a class="header-anchor" href="#visibility" aria-label="Permalink to &quot;visibility:&quot;">​</a></h3><ul><li>hidden 隐藏该元素但是该元素所占的内存空间还存在，即“隐身效果”。</li><li>visible 显示元素</li></ul><h2 id="css图片及行内块标签特殊用法" tabindex="-1">CSS图片及行内块标签特殊用法 <a class="header-anchor" href="#css图片及行内块标签特殊用法" aria-label="Permalink to &quot;CSS图片及行内块标签特殊用法&quot;">​</a></h2><h3 id="清除图片下间隙" tabindex="-1">清除图片下间隙 <a class="header-anchor" href="#清除图片下间隙" aria-label="Permalink to &quot;清除图片下间隙&quot;">​</a></h3><p>原因：图片默认与文本的基线对齐</p><p>解决方法一：父级固定高度</p><p>解决方法二：将图片显示为块</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">img{display:block;}</span></span></code></pre></div><p>解决方法二：改变图片的对齐方式，</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">img{vertical-align:不为baseline}</span></span></code></pre></div><p>行内块之间的空白问题: 标签之间的换行符会识别为空格</p><p>解决：font-size:0</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">ul</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">1</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">2</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">3</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">ul</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">ul{</span></span>
<span class="line"><span style="color:#A6ACCD;">   font-size:0</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">li{</span></span>
<span class="line"><span style="color:#A6ACCD;">   font-size:16px;</span></span>
<span class="line"><span style="color:#A6ACCD;"> }</span></span></code></pre></div><h3 id="vertical-align-属性详解" tabindex="-1">vertical-align 属性详解 <a class="header-anchor" href="#vertical-align-属性详解" aria-label="Permalink to &quot;vertical-align 属性详解&quot;">​</a></h3><p>作用1：回顾表格处的应用</p><p>作用2：定义行内元素的基线相对于该元素所在行的基线的垂直对齐。</p><p>常用的值：</p><ul><li>baseline 默认。标签放置在父标签的基线上。 <ul><li>top把标签的顶端与行中最高标签的顶端对齐。</li><li>middle把此标签放置在父标签的中部。</li><li>bottom把标签的底端与行中最低的标签的底端对齐。</li></ul></li></ul><p>典型应用</p><ul><li>图片与图片垂直方向的对齐（行内块与行内块）</li><li>图片与文字垂直方向的对齐</li></ul><h3 id="图片居中" tabindex="-1">图片居中 <a class="header-anchor" href="#图片居中" aria-label="Permalink to &quot;图片居中&quot;">​</a></h3><p>方法1：父元素<code>{text-align:center}</code></p><p>方法2：子元素<code>{display:block;margin:0 auto;}</code></p><h2 id="css三大特性总结" tabindex="-1">CSS三大特性总结 <a class="header-anchor" href="#css三大特性总结" aria-label="Permalink to &quot;CSS三大特性总结&quot;">​</a></h2><h3 id="继承性" tabindex="-1">继承性 <a class="header-anchor" href="#继承性" aria-label="Permalink to &quot;继承性&quot;">​</a></h3><p>概念：子元素可以使用父元素上定义的一些属性值（子承父业）</p><p>表现：后代元素会继承父元素的属性</p><h4 id="总结常用可继承的属性" tabindex="-1">总结常用可继承的属性 <a class="header-anchor" href="#总结常用可继承的属性" aria-label="Permalink to &quot;总结常用可继承的属性&quot;">​</a></h4><p>font-size,font-style,font-weight,font-family,font,text-align,text-indent,cursor,list-style等</p><h4 id="作用" tabindex="-1">作用 <a class="header-anchor" href="#作用" aria-label="Permalink to &quot;作用&quot;">​</a></h4><p>恰当地使用继承可以简化代码，降低CSS样式的复杂性</p><h3 id="优先级" tabindex="-1">优先级 <a class="header-anchor" href="#优先级" aria-label="Permalink to &quot;优先级&quot;">​</a></h3><p>概述：浏览器通过优先级来判断哪些属性值与一个元素最为相关，从而在该元素上应用这些属性值。 样式不冲突，优先级没有意义。当同一个元素有多个冲突声明的时候，优先级才会有意义</p><h4 id="行内样式与选择器的优先级" tabindex="-1">行内样式与选择器的优先级 <a class="header-anchor" href="#行内样式与选择器的优先级" aria-label="Permalink to &quot;行内样式与选择器的优先级&quot;">​</a></h4><p>概述：优先级是基于不同种类选择器组成的匹配规则。优先级就是分配给指定的 CSS 声明的一个权重，它由 匹配的选择器中的 每一种选择器类型的 数值 决定</p><p>总结： 复合选择器的权值计算方式为，组成其所有单一选择器的权重累加 同级之前比较个数，不同级别不可跨越</p><h4 id="继承样式的优先级" tabindex="-1">继承样式的优先级 <a class="header-anchor" href="#继承样式的优先级" aria-label="Permalink to &quot;继承样式的优先级&quot;">​</a></h4><p>概述：每一个直接作用于元素的 CSS 规则总是会接管/覆盖（take over）该元素从祖先元素继承而来的规则。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">行内样式1000&gt;id选择器100&gt;class选择器10&gt;标签选择器1&gt;全局选择器0&gt;继承样式</span></span></code></pre></div><h4 id="例外规则important" tabindex="-1">例外规则important <a class="header-anchor" href="#例外规则important" aria-label="Permalink to &quot;例外规则important&quot;">​</a></h4><p>概述：当在一个样式声明中使用一个 !important 规则时，此声明将覆盖任何其他声明</p><p>语法：<code>.box{background-color:red;!important}</code></p><p>注意：一定要优先考虑使用样式规则的优先级来解决问题而不是 !important</p><h3 id="层叠性" tabindex="-1">层叠性 <a class="header-anchor" href="#层叠性" aria-label="Permalink to &quot;层叠性&quot;">​</a></h3><p>概念： 层叠性是浏览器处理样式冲突的一种能力，当同一个标签设置相同的属性为不同的值时，就产生了冲突。</p><h4 id="表现" tabindex="-1">表现 <a class="header-anchor" href="#表现" aria-label="Permalink to &quot;表现&quot;">​</a></h4><p>（1）开发者样式&gt;浏览器默认样式 （2）行间 &gt;id &gt;类&gt;元素名称&gt;* &gt;继承样式 （a标签举例） （3）当优先级与多个 CSS 声明中任意一个声明的优先级相等的时候，CSS 中最后的那个声明将会被应用到元素上,内部和外部样式遵循就近原则</p><h4 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h4><p>css的层叠性是通过继承 和 优先级实现</p><ol><li>样式声明不冲突 （同时应用于元素）</li><li>样式声明冲突 <ol><li>同级选择器，css样式中最后定义的声明应用于元素（就近原则）</li><li>不同级选择器，由选择器优先级决定</li></ol></li></ol>`,95),t=[s];function n(r,p,c,d,h,u){return e(),l("div",null,t)}const k=a(o,[["render",n]]);export{g as __pageData,k as default};
