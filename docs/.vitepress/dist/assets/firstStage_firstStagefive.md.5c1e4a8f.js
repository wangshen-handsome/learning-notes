import{_ as a,o as l,c as i,N as e}from"./chunks/framework.e454f055.js";const f=JSON.parse('{"title":"CSS 浮动","description":"","frontmatter":{},"headers":[],"relativePath":"firstStage/firstStagefive.md"}'),t={name:"firstStage/firstStagefive.md"},s=e(`<h1 id="css-浮动" tabindex="-1">CSS 浮动 <a class="header-anchor" href="#css-浮动" aria-label="Permalink to &quot;CSS 浮动&quot;">​</a></h1><h2 id="学习目标" tabindex="-1">学习目标 <a class="header-anchor" href="#学习目标" aria-label="Permalink to &quot;学习目标&quot;">​</a></h2><ul><li>掌握浮动属性的应用</li><li>熟悉浮动元素的基础特性</li><li>能够说出浮动产生的的问题</li><li>掌握清浮动的方法</li></ul><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><p>网页中有很多布局效果，标准流没有办法完成，使用可以利用浮动改变元素默认的排列方式，举例说明（如网页中横向排列的模块或者一左一右排列的模块）</p><h2 id="浮动的概念" tabindex="-1">浮动的概念 <a class="header-anchor" href="#浮动的概念" aria-label="Permalink to &quot;浮动的概念&quot;">​</a></h2><p>浮动可以使元素【脱离文档流】，【按照指定方向排列】，直到遇到父元素的边界或另一个浮动元素【停止】</p><h2 id="浮动属性" tabindex="-1">浮动属性 <a class="header-anchor" href="#浮动属性" aria-label="Permalink to &quot;浮动属性&quot;">​</a></h2><ul><li>float <ul><li>left 左浮动</li><li>right 右浮动</li><li>float:none 不浮动(默认值)</li></ul></li></ul><h2 id="浮动的基本特性" tabindex="-1">浮动的基本特性 <a class="header-anchor" href="#浮动的基本特性" aria-label="Permalink to &quot;浮动的基本特性&quot;">​</a></h2><ul><li>可以使块元素在一行排列</li><li>脱离文档流</li><li>提升层级</li></ul><h2 id="浮动的问题-为什么要清浮动" tabindex="-1">浮动的问题（为什么要清浮动） <a class="header-anchor" href="#浮动的问题-为什么要清浮动" aria-label="Permalink to &quot;浮动的问题（为什么要清浮动）&quot;">​</a></h2><ul><li>子元素浮动导致父元素高度塌陷</li><li>影响之后元素的布局</li></ul><h2 id="清浮动的方法" tabindex="-1">清浮动的方法 <a class="header-anchor" href="#清浮动的方法" aria-label="Permalink to &quot;清浮动的方法&quot;">​</a></h2><p>解决问题即清除动的方法</p><ul><li><p>父元素固定高度法</p><ul><li>描述：给浮动元素的父元素固定高度</li><li>缺点：不够灵活</li><li>代码演示</li></ul></li><li><p>父元素overflow方法</p><ul><li>描述：给父元素加 overflow 属性，overflow 为 visible 以外的其它值时可以帮助实现</li><li>缺点：可能会隐藏内容或触发不需要的滚动条</li></ul></li><li><p>额外标签法</p><ul><li>描述：在浮动元素的最后加一个空块元素，此元素本身不浮动，且添加样式clear:both;</li><li>clear属性说明 <ul><li>作用：清除浮动</li><li>取值 <ul><li>left both right</li><li>提示通常使用both,</li></ul></li></ul></li><li>缺点：代码冗余，影响代码可读性</li></ul></li><li><p>伪元素:：after ***</p><ul><li><p>描述：给浮动标签的父标签添加</p><p>.clearfix:：after{ content:&quot;&quot;;display:block;clear:both;}</p></li><li><p>优点：内容适应性强，不会在结构上产生冗余代码，可多次重复使用</p></li><li><p>作为通用代码总结</p></li></ul></li></ul><h2 id="浮动特性总结" tabindex="-1">浮动特性总结 <a class="header-anchor" href="#浮动特性总结" aria-label="Permalink to &quot;浮动特性总结&quot;">​</a></h2><ul><li>脱离文档流</li><li>提升层级</li><li>对块元素的影响 <ul><li>使块元素在一行排列</li><li>未定宽度的块元素适应内容</li></ul></li><li>对行内元素的影响 <ul><li>生成了一个块级框即 （1）支持宽高 （2）支持垂直方向的margin,padding （3）支持行高、text-align等文本属性</li></ul></li><li>脱离文档流不脱离文本流</li></ul><h2 id="浮动特性应用实例" tabindex="-1">浮动特性应用实例 <a class="header-anchor" href="#浮动特性应用实例" aria-label="Permalink to &quot;浮动特性应用实例&quot;">​</a></h2><h3 id="应用实例图文绕排" tabindex="-1">应用实例图文绕排 <a class="header-anchor" href="#应用实例图文绕排" aria-label="Permalink to &quot;应用实例图文绕排&quot;">​</a></h3><ul><li>总结：浮动脱离文档流不脱离文本流</li><li>扩展了解： 最初只用于在成块的文本内浮动图像， 现在它已成为在网页上创建多列布局的最常用工具之一</li><li>学员练习：以上课堂 代码</li></ul><h3 id="两列自适应" tabindex="-1">两列自适应 <a class="header-anchor" href="#两列自适应" aria-label="Permalink to &quot;两列自适应&quot;">​</a></h3><ul><li>实现要点：单列定宽，单列自适应</li><li>浮动实现 <ul><li>说明： 左侧列固定，左侧浮动，右侧列使用margin-left预留位置。 右侧列固定同理</li><li>代码演示</li></ul></li></ul><h2 id="滑动门" tabindex="-1">滑动门 <a class="header-anchor" href="#滑动门" aria-label="Permalink to &quot;滑动门&quot;">​</a></h2><h3 id="概述-1" tabindex="-1">概述： <a class="header-anchor" href="#概述-1" aria-label="Permalink to &quot;概述：&quot;">​</a></h3><p>为了 使各种特殊形状的背景能够自由拉伸滑动，以适应元素内部的文本内容，出现了CSS滑动门技术。 最常见于各种导航栏的滑动门</p><h3 id="实例预览" tabindex="-1">实例预览 <a class="header-anchor" href="#实例预览" aria-label="Permalink to &quot;实例预览&quot;">​</a></h3><p><a href="https://weixin.qq.com/" target="_blank" rel="noreferrer">https://weixin.qq.com/</a></p><h3 id="实现要点" tabindex="-1">实现要点 <a class="header-anchor" href="#实现要点" aria-label="Permalink to &quot;实现要点&quot;">​</a></h3><ul><li>特殊背景拼合</li><li>内容自适应 <ul><li>浮动</li><li>行内块</li></ul></li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">核心技术就是利用CSS精灵（主要是背景位置）和盒子padding撑开宽度, 以便能适应不同字数的导航栏。</span></span>
<span class="line"><span style="color:#A6ACCD;">结构：</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;span&gt;首页&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">a 设置 背景的右侧，padding-right撑开合适宽度。</span></span>
<span class="line"><span style="color:#A6ACCD;">span 设置背景左侧， padleft-left撑开合适宽度 剩下由文字继续撑开宽度。</span></span>
<span class="line"><span style="color:#A6ACCD;">之所以a包含span就是因为 整个导航都是可以点击的。 </span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="css-精灵" tabindex="-1">CSS 精灵 <a class="header-anchor" href="#css-精灵" aria-label="Permalink to &quot;CSS 精灵&quot;">​</a></h2><p>学习目标</p><ul><li>能够说出什么是CSS精灵</li><li>掌握CSS精灵在实际示案例中的应用</li></ul><h3 id="概述-2" tabindex="-1">概述 <a class="header-anchor" href="#概述-2" aria-label="Permalink to &quot;概述&quot;">​</a></h3><p>css精灵英文叫法 css sprites，通常被解释为“CSS 图像拼合”或“CSS 贴图定位”；其实就</p><p><mark>是把网页中一些背景图片整合到一张图片文件中</mark>再</p><p><mark>利用 CSS “background-image”， “background- repeat”，“background-position”的组合进行背景定位</mark>，background-position 精确的定位出背景图片的位置</p><h3 id="精灵图的原理" tabindex="-1">精灵图的原理 <a class="header-anchor" href="#精灵图的原理" aria-label="Permalink to &quot;精灵图的原理&quot;">​</a></h3><h3 id="实现步骤" tabindex="-1">实现步骤： <a class="header-anchor" href="#实现步骤" aria-label="Permalink to &quot;实现步骤：&quot;">​</a></h3><p>(1)通常要限定容器大小</p><p>(2)图片拼合</p><p>(3)背景定位</p><h3 id="优缺点" tabindex="-1">优缺点 <a class="header-anchor" href="#优缺点" aria-label="Permalink to &quot;优缺点&quot;">​</a></h3><h4 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h4><p>（1）减少网页的 http 请求，从而大大的提高页面的性能； （2）图片命名上的困扰； （3）更换风格方便。</p><h4 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h4><p>（１）必须要限定容器大小符合背景图元素位置 （２）需要计算位置。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">- 应用场景：适用于一般小图片（如小图标，小背景），不适合大背景大布局背景。</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div>`,49),r=[s];function n(o,h,p,c,u,d){return l(),i("div",null,r)}const q=a(t,[["render",n]]);export{f as __pageData,q as default};
