import{_ as s,o as a,c as n,N as l}from"./chunks/framework.e454f055.js";const p="/learning-notes/assets/image-20220311103748632.e159c597.png",o="/learning-notes/assets/image-20220311111817955.2d183f43.png",e="/learning-notes/assets/2-11用户与海底捞.9436935c.png",t="/learning-notes/assets/2-12客户端与服务器.1780311b.png",r="/learning-notes/assets/url组成.7e2acd07.png",c="/learning-notes/assets/image-20220226094820655.62beb817.png",y="/learning-notes/assets/2-14DNS-域名与ip的关系.a32210a1.png",F="/learning-notes/assets/2-15现实中的协议.2c99a208.png",D="/learning-notes/assets/2-16请求消息.f47e320e.png",i="/learning-notes/assets/image-20210512151226356.aab0a7e7.png",C="/learning-notes/assets/2-18响应消息.f2b20f18.png",A="/learning-notes/assets/image-20220311144129406.20ff089b.png",h="/learning-notes/assets/image-20210512165811928.abf87654.png",d="/learning-notes/assets/image-20220311161007010.e2365320.png",j=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"thirdStage/thirdStagesix.md","lastUpdated":1684891561000}'),g={name:"thirdStage/thirdStagesix.md"},u=l(`<h2 id="回顾" tabindex="-1">回顾 <a class="header-anchor" href="#回顾" aria-label="Permalink to &quot;回顾&quot;">​</a></h2><p>commonjs规范</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">暴露数据</span></span>
<span class="line"><span style="color:#A6ACCD;">module.exports  或者  exports</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">引入数据</span></span>
<span class="line"><span style="color:#A6ACCD;">let obj = require(路径); 路径：如果是自定义模块，必须以 ./ 或者 ../ 开头</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>模块分类</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">自定义模块、内置（核心）模块、第三方模块</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">自定义模块，必须以 ./ 或者 ../ 开头</span></span>
<span class="line"><span style="color:#A6ACCD;">第三方模块：必须放在node_modules中</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>npm的使用</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">npm init</span></span>
<span class="line"><span style="color:#A6ACCD;">npm i 包名</span></span>
<span class="line"><span style="color:#A6ACCD;">npm r 包名</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">工作中的处理</span></span>
<span class="line"><span style="color:#A6ACCD;">1、创建项目文件夹（不要有中文）</span></span>
<span class="line"><span style="color:#A6ACCD;">2、npm init -y   (进入到项目根目录，初始化项目，生成项目管家)</span></span>
<span class="line"><span style="color:#A6ACCD;">3、npm i 包名    (安装使用的包)</span></span>
<span class="line"><span style="color:#A6ACCD;">4、写你的业务逻辑</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h3 id="_7-包的分类" tabindex="-1">7.包的分类 <a class="header-anchor" href="#_7-包的分类" aria-label="Permalink to &quot;7.包的分类&quot;">​</a></h3><p>分为项目包和全局包</p><h4 id="_1、项目包" tabindex="-1">1、项目包 <a class="header-anchor" href="#_1、项目包" aria-label="Permalink to &quot;1、项目包&quot;">​</a></h4><p>被安装到项目的node_modules文件夹的包，都是项目包。</p><p>项目包又分为两类：</p><p>1）开发依赖包：被记录到devDependencies节点中的包，只在开发期间会用到（只是在写代码的时候用）</p><p>2）项目依赖包：被记录到dependencies节点中的包，在开发期间和项目上线之后都会用到。</p><p>总结：我们的包会很多很多，只记录你自己下载的包即可（但是也不用刻意记，因为常用的就那么几个，而且package.json帮我们记录了）</p><h4 id="_2、全局包" tabindex="-1">2、全局包 <a class="header-anchor" href="#_2、全局包" aria-label="Permalink to &quot;2、全局包&quot;">​</a></h4><p>全局包又称为<strong>工具包</strong>，使用的时候同npm一样，也是在cmd命令行中使用的，并不是在代码文件中引入的，是当作工具使用的。</p><p>任何目录下执行安装命令：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">i</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">包名</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-g</span></span>
<span class="line"></span></code></pre></div><p>常用工具包 ： webpack nodemon npm node</p><p>使用特点：</p><p>1）并不是在代码文件中引入的，全局包像npm一样当作可执行程序进行使用</p><p>2）决定某个包是否需要全局安装，需要参考其官方提供的使用说明书</p><p>3）全局包会被安装到C:\\Users\\用户\\AppData\\Roaming\\npm目录下</p><h6 id="全局包案例" tabindex="-1">全局包案例 <a class="header-anchor" href="#全局包案例" aria-label="Permalink to &quot;全局包案例&quot;">​</a></h6><p>markdown工具包</p><p>作用：把 .md 文件转换成 .html文件</p><p>npm地址：<a href="https://www.npmjs.com/package/markdown" target="_blank" rel="noreferrer">https://www.npmjs.com/package/markdown</a></p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">i</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">markdown</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-g</span></span>
<span class="line"></span></code></pre></div><p>命令行：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">md2html</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">笔记06.md</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">abc.html</span></span>
<span class="line"></span></code></pre></div><h3 id="_8-包加载机制-总结" tabindex="-1">8.包加载机制( 总结 ) <a class="header-anchor" href="#_8-包加载机制-总结" aria-label="Permalink to &quot;8.包加载机制( 总结 )&quot;">​</a></h3><h4 id="_1、内置模块的加载机制" tabindex="-1">1、内置模块的加载机制 <a class="header-anchor" href="#_1、内置模块的加载机制" aria-label="Permalink to &quot;1、内置模块的加载机制&quot;">​</a></h4><p>内置模块是由Node.js官方提供的模块，<strong>内置模块的加载优先级最高</strong>。</p><p>例如，**require(&#39;fs&#39;) ** 始终返回内置的fs模块，即使在node_modules目录下有名字相同的包也叫做fs，但它也只会引入核心的内置fs模块</p><p>总结：所以第三方模块和自定义模块不要起内置模块的名称</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// require(路径)，路径中没有以./或者../开头，它会优先加载内置模块，如果内置模块没有，则会去加载第三方模块，如果第三方模块也没有，则报错</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// let fs = require(&#39;fs&#39;); // 加载内置模块</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// console.log(fs);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> fs1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">fs1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 没有这个内置模块，则加载第三方模块，如果第三方模块也没有在node_modules中，则报错</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(fs1)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p><strong>总结</strong>：路径中没有以./或者../开头，它会优先加载内置模块，如果内置模块没有，则会去加载第三方模块，如果第三方模块也没有，则报错</p><h4 id="_2、自定义模块加载机制" tabindex="-1">2、自定义模块加载机制 <a class="header-anchor" href="#_2、自定义模块加载机制" aria-label="Permalink to &quot;2、自定义模块加载机制&quot;">​</a></h4><p>1）使用require()加载自定义模块时，必须指定以**./或../**开头的路径标识符。</p><p>2）如果没有指定**./或../<strong>这样的路径标识符，则Node.js会把它当作</strong>内置模块<strong>或</strong>第三方模**块进行加载。</p><p>3）自定义模块不要放在node_modules中，node_modules放的是第三方模块。</p><p>4）在使用require()导入自定义模块时，如果<strong>省略了文件的扩展名</strong>，则Node.js会按顺序分别尝试加载以下的文件：</p><p>​ (1)文件名.js扩展名进行加载</p><p>​ (2)文件名.json扩展名进行加载</p><p>​ (3)如果以上两个都没有，则加载失败，终端报错 <strong>Error:Cannot find module &#39;xxx&#39;</strong></p><p><strong>省略文件扩展名的情况</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./demo/m1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 省略文件扩展名，则默认加载m1.js，如果没有m1.js，则加载m1.json，如果m1.json也没有，则报错</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(obj)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h4 id="_3、第三方模块加载机制" tabindex="-1">3、第三方模块加载机制 <a class="header-anchor" href="#_3、第三方模块加载机制" aria-label="Permalink to &quot;3、第三方模块加载机制&quot;">​</a></h4><p>第三方模块放在node_modules里面</p><p>1）如果require()的模块标识符不是内置模块，即没有以‘./’或‘../’开头，则Node.js会从当前模块的父目录开始，尝试从当前文件夹的/node_modules文件夹中加载第三方模块。</p><p>2）如果没有找到对应的第三方模块，则移动到再上一层父目录中，进行加载，直到当前项目文件的盘符根目录。</p><p><strong>总结</strong>：一定要把第三方模块下载到项目根目录下的node_modules中，且项目中只有根目录下有node_modules目录</p><p><img src="`+p+`" alt="image-20220311103748632"></p><h4 id="_4、package-json中的main属性" tabindex="-1">4、package.json中的main属性 <a class="header-anchor" href="#_4、package-json中的main属性" aria-label="Permalink to &quot;4、package.json中的main属性&quot;">​</a></h4><p>main属性，可以指定模块加载的主入口文件，当引入模块时用<strong>文件夹名结尾时生效</strong>。有三种加载方式：</p><p>1）根据目录下的package.json的文件，寻找main属性指定的文件名，作为require()加载的入口。</p><p>2）如果目录里没有package.json文件，或者main入口不存在，则Node.js将会加载目录下的index.js文件（所以目录中的默认入口为index.js）</p><p>3）如果以上两步都加载失败，则Node.js会在终端打印错误消息，报告模块缺失：Error: Cannot find module &#39;xxx&#39;</p><p><strong>总结：main属性的作用，指定入口文件，如果没有指定或指定的入口文件不存在，则找index.js文件，如果也没有，则报错</strong></p><p>所以后面自己写模块，经常名字为 <code>模块/index.js</code> index.js就是主入口文件</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./tools/trim</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 当以文件夹名结尾时，会根据trim目录中的package.json中的main属性找到主入口文件，如果没有package.json文件或者没有指定main属性，则默认加载index.js，如果也没有index.js，则报错</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(obj)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p><img src="`+o+'" alt="image-20220311111817955"></p><h2 id="一、服务端与客户端" tabindex="-1">一、服务端与客户端 <a class="header-anchor" href="#一、服务端与客户端" aria-label="Permalink to &quot;一、服务端与客户端&quot;">​</a></h2><h3 id="_1-什么是上网" tabindex="-1">1. 什么是上网 <a class="header-anchor" href="#_1-什么是上网" aria-label="Permalink to &quot;1. 什么是上网&quot;">​</a></h3><p>通过因特网（internet）进行获取各种各样的<strong>资源</strong>（文字、图片、音频、视频,....css/js）的过程。</p><p>获取资源的过程就也就是<strong>享受服务</strong>的过程 。</p><h3 id="_2-享受服务的流程" tabindex="-1">2. 享受服务的流程 <a class="header-anchor" href="#_2-享受服务的流程" aria-label="Permalink to &quot;2. 享受服务的流程&quot;">​</a></h3><p>1、现实生活中的服务</p><p><img src="'+e+'" alt=""></p><p>​ 请求：<strong>主动发起诉求</strong></p><p>​ 处理：海底捞处理（加工食材） 处理请求</p><p>​ 响应：就是处理的有结果了 响应结果</p><p>2、互联网上的服务(客户端与服务器端的一次请求流程)</p><p><img src="'+t+'" alt=""></p><p>请求：<a href="http://www.ujiuye.com/zt/webqzgcs/" target="_blank" rel="noreferrer">http://www.ujiuye.com/zt/webqzgcs/</a></p><p>处理：服务端找到请求的这个文件，并把文件发给客户端</p><p>响应：客户端的浏览器获取到文件，并把这个文件渲染成用户能看懂的html</p><h3 id="_3-服务器" tabindex="-1">3. 服务器 <a class="header-anchor" href="#_3-服务器" aria-label="Permalink to &quot;3. 服务器&quot;">​</a></h3><p>远程的一台电脑而已。能放文件。只是配置比个人PC要高的多的多。</p><p>服务器是让成千上万的用户进行发起请求的。</p><p>举例：CTS服务器、优就业官网、中公教育服务器、淘宝www.taobao.com、百度www.baidu.com、腾讯www.qq.com</p><h3 id="_4-客户端" tabindex="-1">4. 客户端 <a class="header-anchor" href="#_4-客户端" aria-label="Permalink to &quot;4. 客户端&quot;">​</a></h3><p>指的本地用户（和我们息息相关的）</p><p>有很多的表现形式：只要能上网都可以称为客户端 。 PC、Mobile、Ipad、智能手表....</p><p>我们这里常常指的是<strong>浏览器</strong></p><h3 id="_5-url地址" tabindex="-1">5. url地址 <a class="header-anchor" href="#_5-url地址" aria-label="Permalink to &quot;5. url地址&quot;">​</a></h3><h4 id="_5-1-基本概念" tabindex="-1">5.1 基本概念 <a class="header-anchor" href="#_5-1-基本概念" aria-label="Permalink to &quot;5.1 基本概念&quot;">​</a></h4><p>​ URL（全称是Uniform Resource Locator），中文叫<strong>统一资源定位符</strong>，用于标识互联网上每个资源的唯一存放位置。浏览器只有通过URL地址，才能正确定位资源的存放位置，从而成功访问到对应的资源。</p><h4 id="_5-2-url" tabindex="-1">5.2 URL <a class="header-anchor" href="#_5-2-url" aria-label="Permalink to &quot;5.2 URL&quot;">​</a></h4><p><img src="'+r+'" alt=""></p><h6 id="通信协议" tabindex="-1">通信协议 <a class="header-anchor" href="#通信协议" aria-label="Permalink to &quot;通信协议&quot;">​</a></h6><p>​ 协议 ：双方去约束一件事情 。</p><p>​ 互联网的通信协议，规定了用户如何请求，又规定了服务器如何响应结果。</p><p>​ 常用的通信协议有：http、https、mysql、qq、邮件协议等</p><p>比如：http和https协议</p><p>​ <a href="http://www.ujiuye.com/" target="_blank" rel="noreferrer">http://www.ujiuye.com/</a></p><p>​ <a href="https://www.baidu.com/" target="_blank" rel="noreferrer">https://www.baidu.com/</a></p><h6 id="服务器名称-域名" tabindex="-1">服务器名称（域名） <a class="header-anchor" href="#服务器名称-域名" aria-label="Permalink to &quot;服务器名称（域名）&quot;">​</a></h6><p>​ 大名。好记。就是标识某一台远程计算机的，它对应的其实是一个IP地址</p><p>​ ujiuye.com / offcn.com / taobao.com / baidu.com</p><p><img src="'+c+'" alt="image-20220226094820655"></p><p>如通过访问220.181.38.251也可以打开百度</p><h6 id="端口号" tabindex="-1">端口号 <a class="header-anchor" href="#端口号" aria-label="Permalink to &quot;端口号&quot;">​</a></h6><p>​ 即封闭的地方，开的一个口子。如故宫是个封闭的（天安门就是端口），大学食堂是封闭的（窗口就是端口）</p><p>​ 只能封闭的空间开放了端口，才能享受到对应的服务。</p><p>​ 服务器是封闭的，比如：一台电脑上（安装了各种各样的软件），qq、微信等，每一个软件都有一个独立的端口。</p><p>​ 同一台电脑上不可能同时运行相同的端口。</p><p>​ 默认的端口：http：80 、https：443 、 mysql：3306</p><p>​ 端口的范围（1-65535）</p><h6 id="路径" tabindex="-1">路径 <a class="header-anchor" href="#路径" aria-label="Permalink to &quot;路径&quot;">​</a></h6><p>​ 以服务器为中心，文件的具体的存放地址。</p><h6 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h6><p>​ 查询字符串参数（querystring），即 url地址中 ? 后面的东西 ，如：key1=value1&amp;key2=value2...</p><p>​ 动态变化的数据就是参数 。比如：</p><p>​ 告诉海底捞服务员，我这次要吃<strong>帝王蟹</strong></p><p>​ 我要登录那肯定要告诉服务器 <strong>账号和密码</strong></p><h6 id="锚点" tabindex="-1">锚点 <a class="header-anchor" href="#锚点" aria-label="Permalink to &quot;锚点&quot;">​</a></h6><p>​ 不是为服务器用的。是前端用的，即#号后面的东西</p><h3 id="_6-域名与ip的关系" tabindex="-1">6. 域名与ip的关系 <a class="header-anchor" href="#_6-域名与ip的关系" aria-label="Permalink to &quot;6. 域名与ip的关系&quot;">​</a></h3><h4 id="ip" tabindex="-1">IP <a class="header-anchor" href="#ip" aria-label="Permalink to &quot;IP&quot;">​</a></h4><p>每一台计算机都有一个ip地址来区分。 即：x.x.x.x，每一位都是以0-255之间的整数表示，但是不好记，所以出现了域名</p><h4 id="域名" tabindex="-1">域名 <a class="header-anchor" href="#域名" aria-label="Permalink to &quot;域名&quot;">​</a></h4><p>是一个虚拟财产。域名能够很好让我们记住某一个网站</p><h4 id="dns服务器" tabindex="-1">DNS服务器 <a class="header-anchor" href="#dns服务器" aria-label="Permalink to &quot;DNS服务器&quot;">​</a></h4><p>DNS服务器是属于一个组织的，从哪个地方买了域名，这个下面就会有DNS服务器。帮我们把域名指向某一个IP地址。</p><p>DNS服务器就可以理解为一个表，记录域名和IP的关系。</p><p><img src="'+y+'" alt=""></p><p>站长之家可以查看域名的信息： <a href="https://whois.chinaz.com/" target="_blank" rel="noreferrer">https://whois.chinaz.com/</a></p><p>cmd快速查看域名和ip的指向：</p><p>​ <code>ping 域名</code> （查看此域名通不通）</p><p>查看本机的ip地址：</p><p>​ <code>ipconfig</code></p><h2 id="二、互联网传输协议" tabindex="-1">二、互联网传输协议 <a class="header-anchor" href="#二、互联网传输协议" aria-label="Permalink to &quot;二、互联网传输协议&quot;">​</a></h2><p>什么是协议：协议（ Protocol）是指双方为了完成一个目标结果所必须遵守的规则和约定。</p><p>通俗的理解：双方采用约定好的格式来做某件事情，这种事先约定好的格式，就叫做协议。</p><h3 id="_1-协议分类" tabindex="-1">1. 协议分类 <a class="header-anchor" href="#_1-协议分类" aria-label="Permalink to &quot;1. 协议分类&quot;">​</a></h3><h4 id="_1-1-现实中的协议" tabindex="-1">1.1 现实中的协议 <a class="header-anchor" href="#_1-1-现实中的协议" aria-label="Permalink to &quot;1.1 现实中的协议&quot;">​</a></h4><p>邮寄规则：寄件人信息、收件人信息</p><p><img src="'+F+'" alt=""></p><h4 id="_1-2-互联网中的传输协议" tabindex="-1">1.2 互联网中的传输协议 <a class="header-anchor" href="#_1-2-互联网中的传输协议" aria-label="Permalink to &quot;1.2 互联网中的传输协议&quot;">​</a></h4><p>http（HyperText Transfer Protocol）：超文本传输协议 （文本、图片、视频、音频、css、js....）。</p><p>规定了如何请求，如何响应。<strong>即我们的数据是如何在网络中传输的</strong>。</p><h3 id="_2-工作原理" tabindex="-1">2. 工作原理 <a class="header-anchor" href="#_2-工作原理" aria-label="Permalink to &quot;2. 工作原理&quot;">​</a></h3><h4 id="_2-1-交互模型-请求与响应" tabindex="-1">2.1 交互模型（请求与响应） <a class="header-anchor" href="#_2-1-交互模型-请求与响应" aria-label="Permalink to &quot;2.1 交互模型（请求与响应）&quot;">​</a></h4><p>​ 交互模型（请求与响应）：HTTP 协议采用了 <strong>请求/响应</strong> 的交互模型。也就是说必须是<strong>客户端主动发起请求</strong>，再由服务器端处理请求，同时被动的把内容响应给客户端</p><h4 id="_2-2-http协议的组成" tabindex="-1">2.2 http协议的组成 <a class="header-anchor" href="#_2-2-http协议的组成" aria-label="Permalink to &quot;2.2 http协议的组成&quot;">​</a></h4><p>有四部分，即<strong>请求消息、响应消息、请求方法、状态码</strong></p><h6 id="_2-2-1-请求消息-request" tabindex="-1">2.2.1 请求消息（request） <a class="header-anchor" href="#_2-2-1-请求消息-request" aria-label="Permalink to &quot;2.2.1 请求消息（request）&quot;">​</a></h6><p>描述：客户端发起的请求叫做 HTTP 请求，客户端发送到服务器的消息，叫做 HTTP 请求消息（又叫做 HTTP 请求报文）</p><p><strong>简单来说就是客户端告知服务器我要干什么</strong>。</p><p>请求消息分三部分组成：<strong>请求行、请求头部、请求体</strong></p><p><img src="'+D+'" alt=""></p><p>请求头部往往是固定的。（我们在请求的时候，浏览器会自动通过请求头额外传递一些参数）</p><p>注意：<strong>get方式的请求没有请求体</strong>。post请求有<strong>请求体</strong></p><p>比如：<a href="http://www.ujiuye.com/zt/webqzgcs" target="_blank" rel="noreferrer">http://www.ujiuye.com/zt/webqzgcs</a></p><p><img src="'+i+'" alt="image-20210512151226356"></p><h6 id="_2-2-2-响应消息-response" tabindex="-1">2.2.2 响应消息（response） <a class="header-anchor" href="#_2-2-2-响应消息-response" aria-label="Permalink to &quot;2.2.2 响应消息（response）&quot;">​</a></h6><p>描述：响应消息就是服务器响应给客户端的消息内容，也叫作响应报文。比如：海底捞服务员把后厨准备好的食材交付给用户</p><p>响应消息分三部分组成：<strong>状态行、响应头部、响应体</strong></p><p><img src="'+C+'" alt=""></p><p><img src="'+A+'" alt="image-20220311144129406"></p><h6 id="_2-2-3-请求方法-方式" tabindex="-1">2.2.3 请求方法(方式) <a class="header-anchor" href="#_2-2-3-请求方法-方式" aria-label="Permalink to &quot;2.2.3 请求方法(方式)&quot;">​</a></h6><p>用来表明要对服务器上的资源执行的某操作，即以何种方式进行请求。</p><p>常见请求方法比如：<strong>get获取 / post提交数据 / delete删除 / put更新</strong></p><h6 id="_2-2-4-状态码" tabindex="-1">2.2.4 状态码 <a class="header-anchor" href="#_2-2-4-状态码" aria-label="Permalink to &quot;2.2.4 状态码&quot;">​</a></h6><p>用来标识响应的状态。服务器的结果要用状态码来进行描述。比如：404页面不存在，200成功</p><p>状态码：</p><p>​ 404 状态码的描述：Not Found</p><p>​ 200 状态码的描述：OK</p><p>常见状态码：</p><p>1** 消息</p><p>2** 成功</p><p>3** 重定向（了解） 成功</p><p>4** 不存在 : 如果出现4开头的，都是<strong>前端的问题</strong></p><p>5** 服务器有问题，都是<strong>后端的问题</strong></p><p><a href="https://baike.baidu.com/item/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/5053660" target="_blank" rel="noreferrer">HTTP状态码_百度百科 (baidu.com)</a></p><h2 id="三、node创建服务器-了解" tabindex="-1">三、Node创建服务器（了解） <a class="header-anchor" href="#三、node创建服务器-了解" aria-label="Permalink to &quot;三、Node创建服务器（了解）&quot;">​</a></h2><h3 id="创建服务器步骤" tabindex="-1">创建服务器步骤 <a class="header-anchor" href="#创建服务器步骤" aria-label="Permalink to &quot;创建服务器步骤&quot;">​</a></h3><p>需要的是 http 模块，这是一个内置模块（实际工作不这样创建）</p><p>1、创建服务器</p><p>​ 写逻辑( 注意：<strong>有请求必须有响应</strong>，否则一直转圈圈 )</p><p>​ 假如端口为 3000（注意不能同时开启两个相同的端口）</p><p>2、使用浏览器发起请求</p><p>​ <a href="http://localhost:3000" target="_blank" rel="noreferrer">http://localhost:3000</a> 访问的 是自己的电脑</p><p>​ <a href="http://127.0.0.1:3000" target="_blank" rel="noreferrer">http://127.0.0.1:3000</a> 访问的 是自己的电脑</p><p>​ <a href="http://xn--IP-nu2du21g2um:3000" target="_blank" rel="noreferrer">http://自己的IP:3000</a> 访问的 是自己的电脑，别人通过这种方式也能访问你的电脑</p><p>​ 查看自己的ip：<code>cmd --&gt; ipconfig</code></p><p><img src="'+h+`" alt="image-20210512165811928"></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 1、引入http模块</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> http </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// console.log(http); // {}   它是一个对象，它下面有一个创建服务器的方法</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> http</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createServer</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 创建服务器，返回服务器的引用</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// listen方法开启端口，第一个参数是端口号，第二个参数是一个函数(可写可不写)，即开启成功后的回调</span></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">listen</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">3000</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">3000端口开启成功了</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 服务器要监听客户的请求，当用户向这个3000端口发起请求，就会触发on绑定的request的事件函数</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 该函数有两个参数，请求和响应，有请求进来，就必须有一个响应回去，用end结束响应</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 注意：修改了代码必须使用node重新运行</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> n </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">request</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">req</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">res</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">n</span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">n</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">次请求进来了</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">end</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">welcomt to node</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 有请求进来，就一定要有响应回去</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p><strong>打开浏览器网络，复盘刚才所讲的请求头和响应头</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">创建基本服务器的步骤</span></span>
<span class="line"><span style="color:#A6ACCD;">1、引入 http</span></span>
<span class="line"><span style="color:#A6ACCD;">2、创建服务器</span></span>
<span class="line"><span style="color:#A6ACCD;">3、开启监听</span></span>
<span class="line"><span style="color:#A6ACCD;">4、接受客户端请求</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">const http = require(&#39;http&#39;);</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">let app = http.createServer();</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">app.listen(3000, () =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">    console.log(&#39;http://localhost:3000  开启成功&#39;);</span></span>
<span class="line"><span style="color:#A6ACCD;">});</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">app.on(&#39;request&#39;, (req, res) =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">    res.end(&#39;hello&#39;);</span></span>
<span class="line"><span style="color:#A6ACCD;">})</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h3 id="代码演示1" tabindex="-1">代码演示1 <a class="header-anchor" href="#代码演示1" aria-label="Permalink to &quot;代码演示1&quot;">​</a></h3><p>问题：对中文显示乱码</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 设置响应头信息，在end之前</span></span>
<span class="line"><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">writeHead</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">200</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">Content-Type</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text/html;charset=utf8</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>只有设置了响应头信息，才能对<strong>中文</strong>进行正确显示</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> http </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> http</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createServer</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">listen</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">3000</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http://localhost:3000</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">request</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">req</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">res</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 写在响应的前面，设置文件类型</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">writeHead</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">200</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">Content-Type</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">text/html;charset=utf8</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">end</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&lt;h1&gt;二狗子，回家吃饭了&lt;/h1&gt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p><strong>打开浏览器网络，在响应头中就可以看到刚才设计的Content-type</strong></p><h3 id="代码演示2" tabindex="-1">代码演示2 <a class="header-anchor" href="#代码演示2" aria-label="Permalink to &quot;代码演示2&quot;">​</a></h3><p>打印请求消息。method和url</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> http </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> http</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createServer</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">listen</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">3000</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http://localhost:3000</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">request</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">req</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">res</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">请求方法</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">req</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">method</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 请求方法</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">请求地址</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">req</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">url</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 请求地址</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">------------------</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 写在响应的前面，设置文件类型</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">writeHead</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">200</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">Content-Type</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">text/html;charset=utf8</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">end</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&lt;h1&gt;二狗子，回家吃饭了&lt;/h1&gt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p><img src="`+d+`" alt="image-20220311161007010"></p><p>注意事项：浏览器默认会请求favicon.icon小图标 。</p><p>​ 所有请求的url，默认都是 以 / 开头，/ 代表根</p><h3 id="代码演示3" tabindex="-1">代码演示3 <a class="header-anchor" href="#代码演示3" aria-label="Permalink to &quot;代码演示3&quot;">​</a></h3><p>根据不同路径地址返回不同消息。/login和/register</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> http </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> http</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createServer</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">listen</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">3000</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http://localhost:3000</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">request</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">req</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">res</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">url</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">req</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">url</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 请求的地址</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">writeHead</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">200</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">Content-Type</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">text/html;charset=utf8</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">url</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">startsWith</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/login</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 登录</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">end</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&lt;h1&gt;登录&lt;/h1&gt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">url</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">startsWith</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/register</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 注册</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">end</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&lt;h1&gt;注册&lt;/h1&gt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 404</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">writeHead</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">404</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">Content-Type</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">text/html;charset=utf8</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">end</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">404</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h3 id="代码演示4" tabindex="-1">代码演示4 <a class="header-anchor" href="#代码演示4" aria-label="Permalink to &quot;代码演示4&quot;">​</a></h3><p>根据不同路径地址返回对应html页面内容/login和/register</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> http </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> http</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createServer</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">listen</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">3000</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http://localhost:3000</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> fs </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">fs</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> path </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">path</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">request</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">req</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">res</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">url</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">req</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">url</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 请求的地址</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">writeHead</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">200</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">Content-Type</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">text/html;charset=utf8</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">url</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">startsWith</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/login</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 登录</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fileUrl</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">__dirname</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./views/login.html</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readFileSync</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">fileUrl</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">utf-8</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">end</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">url</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">startsWith</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/register</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 注册</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fileUrl</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">__dirname</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./views/register.html</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readFileSync</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">fileUrl</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">end</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 404</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">writeHead</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">404</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">Content-Type</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">text/html;charset=utf8</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">end</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">404</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>1、使用http模块写服务器监听端口不能重复，如果有重复的会报错，端口的范围（1-65535）</p><p>2、运行起我们写的服务，不能关</p><p>3、修改了后端代码，要重新运行（重新使用node运行），使用node运行的js代码是后端代码 。</p><p>​ ps：能够用浏览器看到任何代码都属于前端代码</p><p>4、如何访问：</p><p>​ <a href="http://localhost:3000" target="_blank" rel="noreferrer">http://localhost:3000</a> 访问的 是自己的电脑</p><p>​ <a href="http://127.0.0.1:3000" target="_blank" rel="noreferrer">http://127.0.0.1:3000</a> 访问的 是自己的电脑</p><p>​ <a href="http://xn--IP-nu2du21g2um:3000" target="_blank" rel="noreferrer">http://自己的IP:3000</a> 访问的 是自己的电脑，别人通过这种方式也能访问你的电脑</p>`,220),m=[u];function f(b,q,_,E,k,x){return a(),n("div",null,m)}const w=s(g,[["render",f]]);export{j as __pageData,w as default};
